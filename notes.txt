Project Name: Lesson Learn Tracker

this is the first project of the udemy course which is just going over
the usage of python and leartning the functions and methods

project started on 06-21-2025
project finished on TBD

1. so using chatgpt used it to make suggests of project ideas that are simular to a TO-DO List
some examples are Lesson Learn Log, Values and Alignment Tracker, Coping Skills and Self_reflaction
prompts

1.2 Following along with the Udemy Course Python Mega Course Module 1 is a To-Do list instead of doing
this i am going to change it to Lessons Learn Log.

1.3 How does this work:
    User will beable to add lessons learned from experiences
    user will beable to add a note to lesson if they want to
    User will beable to view all lessons
    Along with edit and delete as user understand and evolves

Starting the project
Section 1
    2. getting the user to beable to interact and getting the user to enter a input with the input() function

    2.1 user enters something but then it will disappear to be gone has no way to
        save data
            variable = input() the variable is like a box
            print and input are label as functions
            inside these functions are known as arguments
            can have 0 or more arguments
            functions can return a value
            text in python are strings
            can store strings in variables in project i have a example of both

    2.2
        Date 06-22-2025
        continuing getting user input
        with having varibles with a message is good and bad
            good because if you want to edit you can go there in change it, improves readablity of code
            bad adds more lines of code to project and more for computer to run

    2.2.1
        storing users input in a list
        [] is a python list
        print(type(variable)) shows the user the class of variable
        type() is consider a function in requires a argument

    2.3
        bonus example have a user enter a book title in getting the length of title.
        but we are going to do game titles instead

        first we build it then watch the vod. added a few f statements and a title() method to capitalize title.
        this was a simple appilication to make nothing to complex.

section 2
    1. starting section 2 of the course

    1.1 going to work on getting user input repeatedly
        using batch operation

            user1_input = input()
            user2_input = input()
            user3_input = input()
            not a setstainable way of getting multiple inputs.

            best way is using a while loop
                while 2 > 1 basic beginner way
                while is a function
                2 > 1 is a condition
                checking to s is 2 is greater then 1
                a True statement

                but the correct way is using
                while True:

    1.2 today working on getting a list together so that the program keeps the
    data we enter.

        with list = [] above the while loop for main list
        we then append list to a agrument
            list.append(input)
            append is a method
            method are attached to data types

        bonus example 2
        checking to see if a user enters a password correctly
        we used a != (not equal) condition on the same line as while loop to compare what the user enters in what was hard coded
        just continues to ask user to input a password till its the correct one

        in bonus 2.1 what to produce a series of numbers as output
        x = x + 1
        x gets overwritten till the value is = to 6

        finshed section 2 starting section 3

Section 3
    1: start of section 3

    1.1 we are taking the input from the user and appending it to the empty list
        and capitalizing the first letter with the capitalization method and then printing
        out the list to see whats inside the list

    1.2 we are now going to add a step in have the user to beable to choose from add or exit the program
        using the match case statement
        how we do that first
            1: need to ask the user a question?
                   would you like to add, show, exit
        then you would do a case for each add, show and exit
        after that would do the logic for each case statement
    1.3
    getting rid of the [] and  '' in the show section of the cli project
           using a for loop example below
            for item in variable:
                print(item)
    if user is wanting to add a new lesson but does this "add " it will error so
    on the user decision input you add .strip() method and it strips the whitespace
    using the capitalize() menthod we place that show the first letter would be capitalize if user
    did not do so

    bonus example bonus3.py while looops run till the condition is true
    for loops run till the list is done
    for loops are treated as sequences of objects
    finshed up this section

section 4
    1.1 working with list indexing and tuples

    1.2
        adding a edit key to beable to edit but first we need to add a number to
        the list of options to beable to choose from.
        please look at the notion for updates and notes

Its 9-21-2025 getting back into working on this course i stopped taking notes
on here in using a 5 folder/tabbed notebook wanna start putting notes back
on here also for but i am a writer also.

Section 8
section is improving the way to read files we go from this
            # read file to beale to see the in console
            file = open('lesson_learn.txt', 'r')
            # equal to writeline but just reading
            lesson_list = file.readlines() # list was created here
            # need to close file so different code cant affect file
            file.close() # just a safety
       to this
        with open('file.txt' as r) as file:
            lesson_list = file.readlines()

        can do the same to write to files also
        with open('file.txt', w) as file:
            file.writelines(list)

section 8 bonus example is a daily journal
requirements: Date, rate mood 1-10, Let the thoughts flow
will go into a folder, and file saved by the date of entry

DATE TIME STRFTIME() FORMATS
Common strftime() format codes:
%Y: Year with century (e.g., 2025)
%m: Month as a zero-padded decimal number (01-12)
%d: Day of the month as a zero-padded decimal number (01-31)
%H: Hour (24-hour clock) as a zero-padded decimal number (00-23)
%I: Hour (12-hour clock) as a zero-padded decimal number (01-12)
%M: Minute as a zero-padded decimal number (00-59)
%S: Second as a zero-padded decimal number (00-59)
%f: Microsecond as a zero-padded decimal number (000000-999999)
%p: Locale's equivalent of AM or PM
%A: Full weekday name (e.g., Thursday)
%B: Full month name (e.g., October)
%c: Locale's appropriate date and time representation
%x: Locale's appropriate date representation
%X: Locale's appropriate time representation
%z: UTC offset in the form +HHMM or -HHMM
%Z: Time zone name (e.g., PDT)
